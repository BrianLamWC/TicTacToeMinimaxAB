{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","i","this","renderSquare","React","Component","Minimax","board","playerXTurn","alpha","beta","newBoard","boardValue","calculateBoardValue","isBoardFull","best","Infinity","Math","max","min","lines","k","length","a","b","c","Game","history","stepNumber","slice","calculateWinner","optimalMoveVal","optimalMove","moveVal","mostOptimalMove","setState","concat","step","xIsNext","current","moves","map","move","desc","jumpTo","status","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b5f6194.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react'\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n    };\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    } \n    squares[i] = 'X'\n    \n    const optimalMove = mostOptimalMove(squares)\n\n    squares[optimalMove] = 'O'\n\n    this.setState({\n      history: history.concat([{\n      squares: squares,\n      }]),\n      stepNumber: history.length,\n    })\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const boardValue = calculateBoardValue(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status = 'Choose your next move';\n\n    if(boardValue === 10){\n      status = 'X wins'\n    } else if(boardValue === -10){\n      status = 'O Wins'\n    } \n    \n    if(isBoardFull(current.squares)){\n      status = 'Tie'\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction mostOptimalMove(squares){\n  let newBoard = squares;\n  let optimalMoveVal = Infinity;\n  let optimalMove = null;\n\n  for (let i = 0; i < 9; i++){\n      if(newBoard[i] === null){\n          newBoard[i] = 'O'\n          const moveVal = Minimax(newBoard, true, -Infinity, Infinity)\n          newBoard[i] = null\n\n          if(moveVal < optimalMoveVal){\n              optimalMove = i\n              optimalMoveVal = moveVal\n          }\n      }\n  }\n  \n  return optimalMove\n}\n\nfunction Minimax(board, playerXTurn, alpha, beta){\n  let newBoard = board;\n  let boardValue = calculateBoardValue(newBoard);\n\n  if(boardValue === 10){\n      return boardValue;\n  }else if (boardValue === -10){\n      return boardValue;\n  }\n\n  if (isBoardFull(newBoard)){\n      return 0;\n  }\n\n  if (playerXTurn){\n      let best = -Infinity;\n      for(let i = 0; i < 9; i++){\n          if(newBoard[i] === null){\n              newBoard[i] = 'X'\n              best = Math.max(best, Minimax(newBoard, false, alpha, beta))\n              alpha = Math.max(best, alpha)\n              newBoard[i] = null\n              if (alpha >= beta){\n                break\n              }\n          }\n      }\n     return best\n  } else {\n      let best = Infinity\n      for(let i = 0; i < 9; i++){\n          if(newBoard[i] === null){\n              newBoard[i] = 'O'\n              best = Math.min(best, Minimax(newBoard, true, alpha, beta))\n              beta = Math.min(best, beta)\n              newBoard[i] = null\n              if (alpha >= beta){\n                break\n              }\n          }\n      }\n      return best\n  }\n}\n\nfunction calculateBoardValue(board){\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let k = 0; k < lines.length; k++) {\n    const [a, b, c] = lines[k];\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      if (board[a] === 'X'){\n          return 10\n      }else if (board[b] === 'O'){\n          return -10\n      }\n    }\n  }\n}\n\nfunction isBoardFull(board){\n  for (let i = 0; i < 9; i++){\n      if(board[i] === null){\n          return false\n      }\n  }\n  return true\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}